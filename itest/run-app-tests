#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/assert.sh
source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_push_an_app_no_start() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  create_static_app "$app_name" "$working_dir"

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: "static-*/content",
    manifest: "static-app/manifest.yml",
    no_start: "true"
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_stopped "$app_name"
}

it_can_rename_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}
  local new_app_name=${4:?new_app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg new_app_name "$new_app_name" \
  '{
    command: "rename",
    org: $org,
    space: $space,
    app_name: $app_name,
    new_app_name: $new_app_name
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::failure cf_app_exists "$app_name"
  assert::success cf_app_exists "$new_app_name"
}

it_can_start_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "start",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_started "$app_name"
}

it_can_stop_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "stop",
    org: $org,
    space: $space,
    app_name: $app_name
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_stopped "$app_name"
}

it_can_scale_an_app_instances() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg instances "2" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    instances: $instances
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::equals 2 "$(cf_get_app_instances "$app_name")"
}

it_can_scale_an_app_disk_quota() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg disk_quota "512M" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    disk_quota: $disk_quota
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::equals 512 "$(cf_get_app_disk_quota "$app_name")"
}

it_can_scale_an_app_memory() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg memory "512M" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    memory: $memory
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::equals 512 "$(cf_get_app_memory "$app_name")"
}

it_can_scale_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg instances "1" \
  --arg disk_quota "1G" \
  --arg memory "1G" \
  '{
    command: "scale",
    org: $org,
    space: $space,
    app_name: $app_name,
    instances: $instances,
    disk_quota: $disk_quota,
    memory: $memory
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::equals 1 "$(cf_get_app_instances "$app_name")"
  assert::equals 1024 "$(cf_get_app_disk_quota "$app_name")"
  assert::equals 1024 "$(cf_get_app_memory "$app_name")"
}

it_can_set_env() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local env_var_name=JBP_CONFIG_OPEN_JDK_JRE
  local env_var_value='{ jre: { version: 1.8.0_+ }, memory_calculator: { stack_threads: 200 } }'j

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg env_var_name "$env_var_name" \
  --arg env_var_value "$env_var_value" \
  '{
    command: "set-env",
    org: $org,
    space: $space,
    app_name: $app_name,
    env_var_name: $env_var_name,
    env_var_value: $env_var_value
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_has_env "$app_name" "$env_var_name" "$env_var_value"
}

it_can_restart_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "restart",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_started "$app_name"
}

it_can_restage_an_app() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "restage",
    org: $org,
    space: $space,
    app_name: $app_name,
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_started "$app_name"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
original_app_name=$(generate_test_name_with_spaces "Original App")
app_name=$(generate_test_name_with_spaces "App")

setup_integration_tests "$org" "$space"

run it_can_push_an_app_no_start \"$org\" \"$space\" \"$original_app_name\"
run it_can_rename_an_app \"$org\" \"$space\" \"$original_app_name\" \"$app_name\"
run it_can_start_an_app \"$org\" \"$space\" \"$app_name\"
run it_can_stop_an_app \"$org\" \"$space\" \"$app_name\"

run it_can_scale_an_app_instances \"$org\" \"$space\" \"$app_name\"
run it_can_scale_an_app_disk_quota \"$org\" \"$space\" \"$app_name\"
run it_can_scale_an_app_memory \"$org\" \"$space\" \"$app_name\"
run it_can_scale_an_app \"$org\" \"$space\" \"$app_name\"

run it_can_set_env \"$org\" \"$space\" \"$app_name\"

run it_can_restart_an_app \"$org\" \"$space\" \"$app_name\"
run it_can_restage_an_app \"$org\" \"$space\" \"$app_name\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
