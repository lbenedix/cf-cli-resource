#!/bin/bash

set -eu
set -o pipefail

test_dir=$(dirname $0)

source $test_dir/assert.sh
source $test_dir/helpers.sh
source $test_dir/config.sh

it_can_push_an_app_with_startup_command() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  create_static_app "$app_name" "$working_dir"

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: "static-app/content",
    manifest: "static-app/manifest.yml",
    staging_timeout: 15,
    startup_timeout: 5
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')

  echo "push with default default command"; {
    put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'
    assert::success cf_is_app_started "$app_name"
  }

  local default_startup_command=$(cf_get_app_startup_command "$app_name")
  local custom_startup_command='$HOME/boot.sh --dummy-flag'

  echo "push with custom startup command"; {
    config=$(echo $config | jq --arg startup_command "$custom_startup_command" '.params.startup_command = $startup_command')
    put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

    assert::success cf_is_app_started "$app_name"
    assert::equals "$custom_startup_command" "$(cf_get_app_startup_command "$app_name")"
  }

  echo "push and reset to default startup command"; {
    config=$(echo $config | jq --arg startup_command "null" '.params.startup_command = $startup_command')
    put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

    assert::success cf_is_app_started "$app_name"
    assert::equals "$default_startup_command" "$(cf_get_app_startup_command "$app_name")"
  }
}

it_can_push_an_app_with_vars() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir -p "$working_dir/static-app/content"

  echo "Hello" > "$working_dir/static-app/content/index.html"
  cat <<EOF >"$working_dir/static-app/manifest.yml"
---
applications:
- name: $app_name
  memory: ((memory))
  disk_quota: 64M
  instances: ((instances))
  path: content
  buildpack: staticfile_buildpack
EOF

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: "static-app/content",
    manifest: "static-app/manifest.yml",
    vars: { instances: 2, memory: "96M" }
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_started "$app_name"
  assert::equals 2 "$(cf_get_app_instances "$app_name")"
  assert::equals 96 "$(cf_get_app_memory "$app_name")"
}

it_can_push_an_app_with_vars_files() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  mkdir -p "$working_dir/static-app/content"

  echo "Hello" > "$working_dir/static-app/content/index.html"
  cat <<EOF >"$working_dir/static-app/manifest.yml"
---
applications:
- name: $app_name
  memory: ((memory))
  disk_quota: 64M
  instances: ((instances))
  path: content
  buildpack: staticfile_buildpack
EOF

  cat <<EOF >"$working_dir/static-app/vars-file1.yml"
---
memory: 64M
EOF

  cat <<EOF >"$working_dir/static-app/vars-file2.yml"
---
instances: 1
EOF

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: "static-app/content",
    manifest: "static-app/manifest.yml",
    vars_files: [ "static-app/vars-file1.yml", "static-app/vars-file2.yml" ]
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_started "$app_name"
  assert::equals 1 "$(cf_get_app_instances "$app_name")"
  assert::equals 64 "$(cf_get_app_memory "$app_name")"
}

it_can_push_an_app_with_stack() {
  local org=${1:?org null or not set}
  local space=${2:?space null or not set}
  local app_name=${3:?app_name null or not set}
  local stack=${4:?stack null or not set}

  local working_dir=$(mktemp -d $TMPDIR/put-src.XXXXXX)

  create_static_app "$app_name" "$working_dir"

  local params=$(jq -n \
  --arg org "$org" \
  --arg space "$space" \
  --arg app_name "$app_name" \
  --arg stack "$stack" \
  '{
    command: "push",
    org: $org,
    space: $space,
    app_name: $app_name,
    path: "static-app/content",
    manifest: "static-app/manifest.yml",
    stack: $stack
  }')

  local config=$(echo $source | jq --argjson params "$params" '.params = $params')
  put_with_params "$config" "$working_dir" | jq -e '.version | keys == ["timestamp"]'

  assert::success cf_is_app_started "$app_name"
  assert::equals "$stack" "$(cf_get_app_stack "$app_name")"
}

org=$(generate_test_name_with_spaces "Org")
space=$(generate_test_name_with_spaces "Space")
app_name=$(generate_test_name_with_spaces "App")
stack=cflinuxfs3

setup_integration_tests "$org" "$space"

run it_can_push_an_app_with_startup_command \"$org\" \"$space\" \"$app_name\"

run it_can_push_an_app_with_vars \"$org\" \"$space\" \"$app_name\"
run it_can_push_an_app_with_vars_files \"$org\" \"$space\" \"$app_name\"

run it_can_push_an_app_with_stack \"$org\" \"$space\" \"$app_name\" \"$stack\"

run it_can_delete_an_app \"$org\" \"$space\" \"$app_name\"

teardown_integration_tests "$org" "$space"
